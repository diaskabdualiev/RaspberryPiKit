===============================================
Урок 16: Работа с потенциометром ⚙️
===============================================

Теоретическая часть
-------------------
Потенциометр – это переменный резистор, который позволяет изменять выходное напряжение путём регулировки сопротивления. Он часто используется для управления различными параметрами (уровнем громкости, яркостью и т.д.) в электронных схемах.

Необходимые компоненты
----------------------
- Raspberry Pi
- Потенциометр
- Модуль **ADS1115** или другой АЦП (аналогово-цифровой преобразователь), способный принимать аналоговый сигнал от потенциометра
- Макетная плата (breadboard), при необходимости
- Соединительные провода

Схема подключения
-----------------
.. figure:: images/lesson3.jpg
   :width: 80%
   :align: center

Запуск кода
-----------
1. Создайте файл `potentiometer.py` в папке `lessons/lesson3/`:

   .. code-block:: bash

      nano lessons/lesson3/potentiometer.py

2. Скопируйте в него следующий код и сохраните файл.
3. Запустите программу:

   .. code-block:: bash

      python3 lessons/lesson3/potentiometer.py

Код программы
-------------
Файл: `lessons/lesson3/potentiometer.py`

.. code-block:: python

   from ads1115_lib import ADS1115
   from time import sleep

   # Создаём экземпляр класса для работы с ADS1115
   a = ADS1115()

   # Функция для "калибровки" входных значений в нужный диапазон
   def MAP(x, in_min, in_max, out_min, out_max):
       return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

   while True:
       try:
           # Считываем аналоговое значение с канала 0
           raw_value = a.read_adc(0)
           # Преобразуем в диапазон 0–180 (например, для управления сервоприводом)
           angle = int(MAP(raw_value, 0, 32767, 0, 180))

           # Выводим значения в консоль
           print(f"Сырой уровень: {raw_value}\tУгол: {angle}°")

           # Небольшая задержка перед следующим считыванием
           sleep(0.1)

       except KeyboardInterrupt:
           print("\nПрограмма остановлена пользователем.")
           break

Разбор кода
-----------
- `from ads1115_lib import ADS1115` – импортируем библиотеку для работы с АЦП ADS1115.
- `a = ADS1115()` – создаём объект для взаимодействия с чипом ADS1115.
- `a.read_adc(0)` – считываем значение с аналогового входа **A0**.
- Функция `MAP(x, in_min, in_max, out_min, out_max)` – масштабирует ("калибрует") полученное аналоговое значение в целевой диапазон (например, 0–180).
- `sleep(0.1)` – делает паузу 0.1 секунды между измерениями.

Ожидаемый результат
-------------------
При повороте потенциометра в терминале будет выводиться текущее аналоговое значение (от 0 до примерно 32767) и вычисленный угол (от 0 до 180). Можете использовать это для управления другими компонентами (например, для регулировки положения сервопривода).

.. .. figure:: images/result3.gif
..    :width: 80%
..    :align: center

   **Рис. 2:** Пример изменения значения потенциометра в реальном времени

Завершение работы
-----------------
Для остановки программы нажмите **Ctrl + C**. Поздравляем! Теперь вы умеете считывать аналоговые значения с потенциометра и использовать их для управления различными задачами на Raspberry Pi.
